import * as R from 'ramda'; // Ramda - имутабельная(то что нужно для редюсера, так как нам нельзя мутировать state)

import {
    FETCH_PHONES_SUCCESS,
    LOAD_MORE_PHONES_SUCCESS,
    FETCH_PHONE_BY_ID_SUCCESS
} from 'redux/action-types';

const initialState = {};

export default (state = initialState, {type, payload}) => { // action = {type, payload} destructure!!!
    // console.log(`whats it is state in my reducer ${state}`);
    switch (type) {
        case FETCH_PHONES_SUCCESS:
            const newValues = R.indexBy(R.prop('id'), payload);
            return R.merge(state, newValues);
        case LOAD_MORE_PHONES_SUCCESS:
            const moreValues = R.indexBy(R.prop('id'), payload);
            return R.merge(state, moreValues);
        case FETCH_PHONE_BY_ID_SUCCESS:
            return R.assoc(payload.id, payload, state); // return new Object  в который мы передаём старый обьект и обновляем ключ с id и передаём payload, если такого ключа там не было он просто там созд.
        default:
                return state;
    }
};