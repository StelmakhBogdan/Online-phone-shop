import * as R from 'ramda';

export const getPhoneById = (state, id) => R.prop(id, state.phones);

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps);

export const getPhones = (state, ownProps) => {
    // R.when(() => true, () => console.log('foo'));
    const activeCategoryId = getActiveCategoryId(ownProps);
    const applySearch = item => R.contains(
        state.phonesPage.search,
        R.prop('name', item) // or item.name
    );
    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop('categoryId', item)
    );

    const phones = R.compose(
        R.filter(applySearch),
        R.when(R.always(activeCategoryId), R.filter(applyCategory)), // () => activeCategoryId === R.always(activeCategoryId)
        R.map(id => getPhoneById(state, id))
    )(state.phonesPage.ids);
    // const phones = R.map(id => getPhoneById(state, id), state.phonesPage.ids);
    return phones
};

export const getRenderedPhones = state => R.length(state.phonesPage.ids);

export const getTotalBasketCount = state => R.length(state.basket); // or => state.basket.length

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        R.sum,
        R.pluck('price'),
        R.map(id => getPhoneById(state, id))
    )(state.basket);

    return totalPrice;
};

export const getCategories = state => R.values(state.categories); //масив обьектов categories

export const getBasketPhoneWithCount = state => {
    const phoneCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket);
    const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone);
    const uniqueIds = R.uniq(state.basket);
    const phones = R.compose(
        R.map(phoneWithCount), // add до массива поле phoneCount
        R.map(id => getPhoneById(state, id))
    )(uniqueIds); // take uniqueId and use map for got phones with uniqueId

    return phones;
};